<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dagger on 전문 초보 개발자</title>
    <link>https://yongju-jin.github.io/tags/dagger/</link>
    <description>Recent content in dagger on 전문 초보 개발자</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>yong8521@gmail.com</managingEditor>
    <webMaster>yong8521@gmail.com</webMaster>
    <lastBuildDate>Tue, 26 Nov 2019 18:20:23 +0900</lastBuildDate>
    
	<atom:link href="https://yongju-jin.github.io/tags/dagger/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dagger With Codelab #2</title>
      <link>https://yongju-jin.github.io/post/dagger_2/</link>
      <pubDate>Tue, 26 Nov 2019 18:20:23 +0900</pubDate>
      <author>yong8521@gmail.com</author>
      <guid>https://yongju-jin.github.io/post/dagger_2/</guid>
      <description>Dagger CodeLab을 하면서 공부한 내용을 요약, 정리
1. Injecting the graph in an Activity 보통 Dagger 그래프는 Application 클래스 안에서 생성한다. 앱이 실행되는 동안 메모리에 그래프의 객체가 존재하길 원하기 때문이다. 이런 방법으로 그래프는 앱의 lifecycle에 종속되게 된다.
open class MyApplication : Application() { // Instance of the AppComponent that will be used by all the Activities in the project  val appComponent: AppComponent by lazy { // Creates an instance of AppComponent using its Factory constructor  // We pass the applicationContext that will be used as Context in the graph  DaggerAppComponent.</description>
    </item>
    
    <item>
      <title>Dagger with Codelab #1</title>
      <link>https://yongju-jin.github.io/post/dagger_1/</link>
      <pubDate>Fri, 22 Nov 2019 00:09:03 +0900</pubDate>
      <author>yong8521@gmail.com</author>
      <guid>https://yongju-jin.github.io/post/dagger_1/</guid>
      <description>Dagger CodeLab을 하면서 공부한 내용을 요약, 정리
1. Dagger 설정 dependencies { def dagger_version = &amp;#34;2.25.2&amp;#34; implementation &amp;#34;com.google.dagger:dagger:$dagger_version&amp;#34; kapt &amp;#34;com.google.dagger:dagger-compiler:$dagger_version&amp;#34; } app/build.gradle에 위와 같이 dagger 관련 depency 설정을 추가.
2. @Inject  In order to build the application graph automatically for us, Dagger needs to know how to create instances for the classes in the graph. One way to do this is by annotating the constructor of classes with @Inject.</description>
    </item>
    
  </channel>
</rss>